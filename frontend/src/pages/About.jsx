import React, { useEffect, useState } from 'react';
import { FaUsers, FaHandshake, FaChartLine, FaBullseye } from 'react-icons/fa';
import { fetchJobs } from '../services/Api';
import './About.css';

const texts = {
  en: {
    heroTitle: "Connecting Talent with Opportunity",
    heroSubtitle: "Your bridge between exceptional candidates and top employers",
    mission: "Our Mission",
    missionText: "We're dedicated to revolutionizing the job search process by creating a platform that's efficient for job seekers and employers alike. Our goal is to reduce unemployment by making job matching smarter, faster, and more effective.",
    totalJobs: "Total Jobs",
    activeJobs: "Active Jobs",
    expiredJobs: "Expired Jobs",
    whyChoose: "Why Choose Our Platform?",
    forSeekers: "For Job Seekers",
    seekersList: [
      "Discover Your Next Opportunity: Browse a wide range of verified job postings from top employers.",
      "Seamless Connections: Easily find company contact details to reach out directly and fast-track your application.",
      "User-Friendly Experience: No lengthy sign-ups‚Äîjust explore jobs and connect with employers effortlessly.",
      "Stay Updated: Regularly updated listings so you never miss out on new openings."
    ],
    forEmployers: "For Employers",
    employersList: [
      "Effortless Job Posting: Submit your job openings through our simple form‚Äîwe handle the rest.",
      "Reach the Right Talent: Get your roles seen by motivated job seekers actively searching for opportunities.",
      "Direct Engagement: Candidates contact you directly, streamlining the hiring process.",
      "Quick & Efficient: No middlemen‚Äîpost jobs fast and start receiving inquiries immediately."
    ],
    team: "Our Team",
    teamText: "We're a diverse group of HR professionals, technologists, and career coaches united by a common goal: to make hiring and job searching painless and productive.",
    ready: "Ready to Find Your Perfect Match?",
    postJob: "Post a Job",
    browseJobs: "Browse Jobs"
  },
  am: {
    heroTitle: "·â•·âÅ ·â∞·ãà·ã≥·ã≥·à™·ãé·âΩ·äï ·ä®·ãï·ãµ·àé·âΩ ·åã·à≠ ·ä•·äï·ã´·ã´·ãõ·àà·äï",
    heroSubtitle: "·â†·â∞·àü·àã ·â∞·ãà·ã≥·ã≥·à™·ãé·âΩ·äì ·â†·ä®·çç·â∞·äõ ·ã®·àµ·à´ ·ä†·ã≥·à´·àæ·âΩ ·àò·ä´·ä®·àç ·ãµ·à≠·â• ·ãµ·à≠·åÖ·âµ",
    mission: "·â∞·àç·ãï·äÆ·â≥·âΩ·äï",
    missionText: "·àà·àµ·à´ ·çà·àã·åä·ãé·âΩ·äì ·àà·àµ·à´ ·ä†·ã≥·à´·àæ·âΩ ·â†·âÄ·àã·àâ ·ã®·àö·à∞·à´ ·àò·ãµ·à®·ä≠ ·â†·àò·çç·å†·à≠ ·ã®·àµ·à´ ·çà·àã·åä·äê·âµ·äï ·àà·àò·âÄ·äê·àµ ·ä•·äì ·ã®·àµ·à´ ·àò·ã´·ã£·äï ·ã®·â†·àà·å† ·âÄ·àã·àç·ç£ ·çà·å£·äï ·ä•·äì ·ãç·å§·â≥·àõ ·àà·àõ·ãµ·à®·åç ·â∞·àµ·çã ·ä†·ãµ·à≠·åà·äì·àç·ç¢",
    totalJobs: "·å†·âÖ·àã·àã ·àµ·à´·ãé·âΩ",
    activeJobs: "·ä†·â£·àç ·àµ·à´·ãé·âΩ",
    expiredJobs: "·ã´·â†·âÉ ·àµ·à´·ãé·âΩ",
    whyChoose: "·àà·àù·äï ·àò·ãµ·à®·ä´·âΩ·äï·äï ·ã≠·àò·à≠·å°?",
    forSeekers: "·àà·àµ·à´ ·çà·àã·åä·ãé·âΩ",
    seekersList: [
      "·ã®·àö·âÄ·å•·àà·ãç·äï ·ãï·ãµ·àç ·ã´·åç·äô·ç° ·ä®·ä®·çç·â∞·äõ ·ã®·àµ·à´ ·ä†·ã≥·à´·àæ·âΩ ·â†·àö·à∞·å° ·ã®·â∞·à®·åã·åà·å° ·àµ·à´·ãé·âΩ ·ãù·à≠·ãù·à≠ ·ã≠·àò·àç·ä®·â±·ç¢",
      "·âÄ·àã·àç ·åç·äï·äô·äê·âµ·ç° ·ã®·ä©·â£·äï·ã´·ãç·äï ·ã®·ä•·ãç·âÇ·ã´ ·ãù·à≠·ãù·à≠ ·â†·âÄ·àã·àâ ·ã´·åç·äô ·ä•·äì ·â†·çç·å•·äê·âµ ·ã≠·åç·â°·ç¢",
      "·â∞·å†·âÉ·àö ·ã®·àÜ·äê ·â∞·àû·ä≠·àÆ·ç° ·à®·åÖ·àù ·àù·ãù·åà·â£ ·ã®·àà·àù·ç§ ·àµ·à´·ãé·âΩ·äï ·ã≠·àò·àç·ä®·â± ·ä•·äì ·ä®·ä†·ã≥·à´·àæ·âΩ ·åã·à≠ ·â†·âÄ·àã·àâ ·ã≠·åà·äì·äô·ç¢",
      "·ãò·ãà·âµ·à≠ ·ã≠·ãò·àù·äë·ç° ·ä†·ã≤·àµ ·ã®·àµ·à´ ·ä†·åà·äì·äû·âΩ·äï ·ä†·âµ·äï·à±·ç¢"
    ],
    forEmployers: "·àà·ä©·â£·äï·ã´·ãé·âΩ",
    employersList: [
      "·âÄ·àã·àç ·ã®·àµ·à´ ·àõ·àµ·â∞·ãã·ãà·âÖ·ã´·ç° ·ã®·àµ·à´·ãé·âµ·äï ·â¶·â≥ ·â†·âÄ·àã·àâ ·ã´·àµ·åà·â°·ç§ ·ä•·äõ ·ä•·äï·ã∞·àù·äì·ã∞·à≠·åà·ãç ·ã≠·â∞·ãâ·âµ·ç¢",
      "·âµ·ä≠·ä≠·àà·äõ·ãç·äï ·â∞·ãà·ã≥·ã≥·à™ ·ã´·åç·äô·ç° ·ã®·àµ·à´·ãé·âµ ·â¶·â≥ ·â†·â∞·äê·à≥·à≥ ·ã®·àµ·à´ ·çà·àã·åä·ãé·âΩ ·çä·âµ ·àã·ã≠ ·ã≠·ãç·à∞·ãµ·ç¢",
      "·âÄ·å•·â≥ ·åç·äï·äô·äê·âµ·ç° ·â∞·ãà·ã≥·ã≥·à™·ãé·âΩ ·â†·âÄ·å•·â≥ ·ã≠·åà·äì·äõ·àâ·ç§ ·ã®·âÖ·ãµ·àö·ã´ ·àÇ·ã∞·â±·äï ·ã´·å†·äì·ä≠·à©·ç¢",
      "·çà·å£·äï ·ä•·äì ·ãç·å§·â≥·àõ·ç° ·àò·ä´·ä®·àà·äõ ·ã®·àà·àù·ç§ ·àµ·à´·ãé·âµ·äï ·â†·çç·å•·äê·âµ ·ã´·àµ·åà·â° ·ä•·äì ·ã®·â∞·å†·ã®·âÅ ·àò·àç·à∂·âΩ·äï ·ã≠·âÄ·â†·àâ·ç¢"
    ],
    team: "·â°·ãµ·äì·âΩ·äï",
    teamText: "·ã®·â∞·àà·ã´·ã© ·ã®·à∞·ãç ·äÉ·ã≠·àç ·â£·àà·àô·ã´·ãé·âΩ·ç£ ·â¥·ä≠·äñ·àé·åÇ ·â£·àà·àô·ã´·ãé·âΩ ·ä•·äì ·ã®·àô·ã´ ·ä†·àµ·â∞·ä´·ä´·ãÆ·âΩ ·äê·äï·ç§ ·ã®·àµ·à´ ·àò·çà·àà·åä·ã´·äï·äì ·àò·âÖ·å†·à≠·äï ·âÄ·àã·àç ·ä•·äì ·ãç·å§·â≥·àõ ·àà·àõ·ãµ·à®·åç ·â†·ä†·äï·ãµ·äê·âµ ·â∞·âÄ·àã·âÖ·àà·äì·àç·ç¢",
    ready: "·ã®·àö·àµ·àõ·àõ·ãç·äï ·åç·äï·äô·äê·âµ ·àà·àõ·åç·äò·âµ ·ãù·åç·åÅ ·äê·ãé·âµ?",
    postJob: "·àµ·à´ ·ã´·àµ·åà·â°",
    browseJobs: "·àµ·à´·ãé·âΩ·äï ·ã≠·àò·àç·ä®·â±"
  }
};

const About = ({ lang = 'en' }) => {
  const [jobs, setJobs] = useState([]);
  const [stats, setStats] = useState({
    totalJobs: 0,
    activeJobs: 0,
    expiredJobs: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const loadJobs = async () => {
      try {
        const { results } = await fetchJobs();
        setJobs(results);

        const totalJobs = results.length;
        const activeJobs = results.filter(job => job.status?.toLowerCase() === 'active').length;
        const expiredJobs = results.filter(job => job.status?.toLowerCase() === 'expired').length;

        setStats({
          totalJobs,
          activeJobs,
          expiredJobs,
        });

        setError(null);
      } catch (err) {
        setError(err.message || 'Failed to fetch job data');
      } finally {
        setLoading(false);
      }
    };

    loadJobs();
  }, []);

  if (loading) return <div className="about-page">Loading statistics...</div>;
  if (error) return <div className="about-page">Error: {error}</div>;

  return (
    <div className="about-page">
      <section className="hero-section">
        <div className="hero-content">
          <h1>{texts[lang].heroTitle}</h1>
          <p>{texts[lang].heroSubtitle}</p>
        </div>
      </section>

      <section className="mission-section">
        <div className="container">
          <h2>{texts[lang].mission}</h2>
          <p>{texts[lang].missionText}</p>
        </div>
      </section>

      <section className="stats-section">
        <div className="container">
          <div className="stats-grid">
            <div className="stat-card">
              <FaUsers className="stat-icon" />
              <h3>{stats.totalJobs?.toLocaleString() || '0'}+</h3>
              <p>{texts[lang].totalJobs}</p>
            </div>
            <div className="stat-card">
              <FaHandshake className="stat-icon" />
              <h3>{stats.activeJobs?.toLocaleString() || '0'}+</h3>
              <p>{texts[lang].activeJobs}</p>
            </div>
            <div className="stat-card">
              <FaChartLine className="stat-icon" />
              <h3>{stats.expiredJobs?.toLocaleString() || '0'}+</h3>
              <p>{texts[lang].expiredJobs}</p>
            </div>
          </div>
        </div>
      </section>

      <section className="features-section">
        <div className="container">
          <h2>{texts[lang].whyChoose}</h2>
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon">üöÄ</div>
              <h3>{texts[lang].forSeekers}</h3>
              <ul>
                {texts[lang].seekersList.map((item, idx) => (
                  <li key={idx}>{item}</li>
                ))}
              </ul>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üè¢</div>
              <h3>{texts[lang].forEmployers}</h3>
              <ul>
                {texts[lang].employersList.map((item, idx) => (
                  <li key={idx}>{item}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </section>

      <section className="team-section">
        <div className="container">
          <h2>{texts[lang].team}</h2>
          <p>{texts[lang].teamText}</p>
          <div className="team-grid">
            {/* Team members would go here */}
          </div>
        </div>
      </section>

      <section className="cta-section">
        <div className="container">
          <h2>{texts[lang].ready}</h2>
          <div className="cta-buttons">
            <a href="/jobpostform" className="cta-button employer-cta">
              {texts[lang].postJob}
            </a>
            <a href="/" className="cta-button jobseeker-cta">
              {texts[lang].browseJobs}
            </a>
          </div>
        </div>
      </section>
    </div>
  );
};

export default About;
